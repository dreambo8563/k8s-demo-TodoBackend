// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type GetTokenRequest struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenRequest) Reset()         { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()    {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

func (m *GetTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenRequest.Unmarshal(m, b)
}
func (m *GetTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenRequest.Marshal(b, m, deterministic)
}
func (m *GetTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenRequest.Merge(m, src)
}
func (m *GetTokenRequest) XXX_Size() int {
	return xxx_messageInfo_GetTokenRequest.Size(m)
}
func (m *GetTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenRequest proto.InternalMessageInfo

func (m *GetTokenRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// The response message containing the greetings
type GetTokenReply struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTokenReply) Reset()         { *m = GetTokenReply{} }
func (m *GetTokenReply) String() string { return proto.CompactTextString(m) }
func (*GetTokenReply) ProtoMessage()    {}
func (*GetTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}

func (m *GetTokenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTokenReply.Unmarshal(m, b)
}
func (m *GetTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTokenReply.Marshal(b, m, deterministic)
}
func (m *GetTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTokenReply.Merge(m, src)
}
func (m *GetTokenReply) XXX_Size() int {
	return xxx_messageInfo_GetTokenReply.Size(m)
}
func (m *GetTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetTokenReply proto.InternalMessageInfo

func (m *GetTokenReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ParseTokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseTokenRequest) Reset()         { *m = ParseTokenRequest{} }
func (m *ParseTokenRequest) String() string { return proto.CompactTextString(m) }
func (*ParseTokenRequest) ProtoMessage()    {}
func (*ParseTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{2}
}

func (m *ParseTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseTokenRequest.Unmarshal(m, b)
}
func (m *ParseTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseTokenRequest.Marshal(b, m, deterministic)
}
func (m *ParseTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseTokenRequest.Merge(m, src)
}
func (m *ParseTokenRequest) XXX_Size() int {
	return xxx_messageInfo_ParseTokenRequest.Size(m)
}
func (m *ParseTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseTokenRequest proto.InternalMessageInfo

func (m *ParseTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ParseTokenReply struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseTokenReply) Reset()         { *m = ParseTokenReply{} }
func (m *ParseTokenReply) String() string { return proto.CompactTextString(m) }
func (*ParseTokenReply) ProtoMessage()    {}
func (*ParseTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{3}
}

func (m *ParseTokenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseTokenReply.Unmarshal(m, b)
}
func (m *ParseTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseTokenReply.Marshal(b, m, deterministic)
}
func (m *ParseTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseTokenReply.Merge(m, src)
}
func (m *ParseTokenReply) XXX_Size() int {
	return xxx_messageInfo_ParseTokenReply.Size(m)
}
func (m *ParseTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseTokenReply proto.InternalMessageInfo

func (m *ParseTokenReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*GetTokenRequest)(nil), "auth.GetTokenRequest")
	proto.RegisterType((*GetTokenReply)(nil), "auth.GetTokenReply")
	proto.RegisterType((*ParseTokenRequest)(nil), "auth.ParseTokenRequest")
	proto.RegisterType((*ParseTokenReply)(nil), "auth.ParseTokenReply")
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874) }

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2c, 0x2d, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x94, 0xb9, 0xf8, 0xdd, 0x53,
	0x4b, 0x42, 0xf2, 0xb3, 0x53, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8,
	0x98, 0x4b, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x55, 0x2e,
	0x5e, 0x84, 0xa2, 0x82, 0x9c, 0x4a, 0x21, 0x11, 0x2e, 0xd6, 0x12, 0x10, 0x0f, 0xaa, 0x08, 0xc2,
	0x51, 0xd2, 0xe4, 0x12, 0x0c, 0x48, 0x2c, 0x2a, 0x4e, 0x45, 0x31, 0x0d, 0xbb, 0x52, 0x45, 0x2e,
	0x7e, 0x64, 0xa5, 0x20, 0x33, 0xf9, 0xb8, 0x98, 0xe0, 0xb6, 0x32, 0x65, 0xa6, 0x18, 0xb5, 0x33,
	0x72, 0x71, 0x3b, 0x96, 0x96, 0x64, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x59, 0x70,
	0x71, 0xc0, 0x1c, 0x21, 0x24, 0xaa, 0x07, 0xf6, 0x08, 0x9a, 0xcb, 0xa5, 0x84, 0xd1, 0x85, 0x0b,
	0x72, 0x2a, 0x95, 0x18, 0x84, 0xec, 0xb8, 0xb8, 0x10, 0x96, 0x09, 0x89, 0x43, 0x14, 0x61, 0xb8,
	0x54, 0x4a, 0x14, 0x53, 0x02, 0xac, 0x3f, 0x89, 0x0d, 0x1c, 0x60, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0xcf, 0x4b, 0x4f, 0x3e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Sends a greeting
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error)
	ParseToken(ctx context.Context, in *ParseTokenRequest, opts ...grpc.CallOption) (*ParseTokenReply, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenReply, error) {
	out := new(GetTokenReply)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ParseToken(ctx context.Context, in *ParseTokenRequest, opts ...grpc.CallOption) (*ParseTokenReply, error) {
	out := new(ParseTokenReply)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ParseToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	// Sends a greeting
	GetToken(context.Context, *GetTokenRequest) (*GetTokenReply, error)
	ParseToken(context.Context, *ParseTokenRequest) (*ParseTokenReply, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ParseToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ParseToken(ctx, req.(*ParseTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AuthService_GetToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _AuthService_ParseToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
